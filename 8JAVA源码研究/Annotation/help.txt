1、definition：
	注解（也称元数据）为我们在代码中添加信息提供了一种形式化的方法，使得我们可以在稍后X个时刻非常方便地使用这些数据
	注解在一定程度上是在把元数据与源代码文件结合在一起，而不是保存在外部文档中-xml文件中
2、advantage and impact：
	a、注解使得我们能够以由编译器来测试和验证的格式来存储有关程序的额外信息,保存在xml文件中必须要由xsd文件来检查
	b、通过使用注解，我们可以将元数据保存在Java源代码中，并利用Annotation API来为自己的注解构造处理工具，以此来使用这些额外信息
	c、增强代码的易读性和干净性，还可以对代码进行编译时检查-eg：@Override
3、category：
	第一大类：三种标准注解
	位于java.lang包中，分别是@Override @Deprecated @SupressWarning
	
	第二大类：元注解-专职负责注解其他的注解/类似于class，形容类的类
	a、@Target 表示了被此元注解注解的注解可以用在什么地方，对应的值放在枚举类型ElementType里：
		包括类/接口-包括注解类型/枚举、域-成员变量、构造器、方法、方法参数、局部变量、包
	b、@Retention 表示次注解在什么级别保存此注解信息，值放在RetentionPolicy里：
		SOURCE：该注解只存在.java文件中，编译过后会被编译器遗弃
		CLASS：该注解只存在于.class文件中，执行之后被JVM遗弃
		RUNTIME：JVM在运行时期也保留此注解，所以可以在运行时通过反射机制来读取注解的信息，利用这些额外信息对程序提供“额外的”帮助
		由于RetentionPolicy是一个枚举类，而枚举类里面的成员变量都是public static final的，所以变量名字用大写字母表示-Java规范
	c、@Documented
		将次注解包含在JavaDoc中
	d、@Inherited
		允许子类继承父类中的注解
4、注解类里面的成员变量可以使用以下类型：
	所有基本类型-8个、String、Class、enum、Annotation、以上类型的数组类型
	如果使用了其他的类型，编译器就会报错；注解也可以作为注解的成员变量类型，即注解嵌套注解，这是一个很有用的技巧------