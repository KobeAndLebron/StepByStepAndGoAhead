JAVA中锁的分类

-------
线程是否要对同步资源加锁: 分为悲观锁和乐观锁, 前者加锁, 后者不加锁.
锁定同步资源失败后, 线程是否要阻塞: 悲观锁阻塞, 乐观锁不阻塞.

Java里面的悲观锁包括Synchronized和ReentrantLock, 乐观锁是通过CAS实现的[原子类中的递增操作就是通过CAS+自旋来实现的].
悲观锁和乐观锁区别见: CasAndAtomic类.

-------
多个线程之间竞争同步资源时要不要排队:

公平锁: 多个线程按照申请锁的顺序来获取锁, 类似于排队打饭, 先来后到.[new ReentrantLock(true)]
非公平锁: 多个线程获取锁的顺序并不是按照申请锁的顺序, 有可能后申请锁的线程比先申请锁的线程先获取锁, 插队失败则再排队.
[synchronized | new ReentrantLock(false)]

非公平锁的优点来说比公平锁的并发量大/吞吐效率高(因为线程在竞争锁的时候, 如果此时锁刚好可用, 那么这个线程可以无需阻塞直接获取锁(插队成功), 就减少了CPU唤起线程的开销.)
假设队列有A->B->C, 这时候D线程过来, 对于公平锁来说, D直接加入队列末尾, CPU要唤醒4次线程; 对于非公平锁来说,
假设D插队成功, 那么CPU不需要唤醒D, 只用唤醒3次线程. 少了一次唤醒开销, CPU吞吐量提高; 插队失败则吞吐量等于公平锁.

缺点是有可能造成优先级反转或饥饿现象(等待队列中的线程可能会饿死, 或者等很久才能获得锁).

-------
一个线程是否多次获取同一把锁:

可重入锁[递归锁]: 同一线程的外层函数获得锁之后, 内层函数依然能够获取到锁.[ReentrantLock和synchronized都是可重入锁]
非可重入锁: 只能获取一次锁.

可重入锁的最大作用: 避免死锁. (查看示例: NonRecursiveLock和RecursiveReentrantLock).

-------
多个线程能不能共享锁:

共享锁/读锁: 能共享.
拍他锁/写锁: 不能共享.

------
Synchronized过程中涉及的锁.

无锁->偏向锁->轻量级锁->重量级锁(锁的升级过程, 详细解释在SynchronizedTheory类)