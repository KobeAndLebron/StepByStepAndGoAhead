package com.gohead.shared.test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

/**
 * 参数化测试超类.
 *
 * @author ChenJingShuai 2 Aug 2016
 *
 * @param <T> 期望结果/真实结果的类型
 */
@RunWith(Parameterized.class)
public abstract class ParentTest<T> {
	protected static final Object OBJ = new Object();
	/**
	 * 期望的结果: true or false. null represents true
	 */
    private Boolean expectedResult;

	/**
	 * Object generated by test method.
	 */
	protected T generatedObj;

    /**
	 * Expected (return) object.
	 */
	protected T expectedObj;

    /**
	 * Id of case.
	 */
	protected int caseId;

    private static int numberOfCase = 0;

    /**
	 * Control which case is executed, all cases are executed when its value is -1.
	 */
	private int debugNum = -1;

	/**
	 * Is ignored?
	 */
	private Boolean isIgnored = true;

	/**
	 * Inputed parameters
	 */
	protected List<Object> parameters = new ArrayList<>(5);

    private boolean isSelfJudged = false;

    public ParentTest(int caseId, boolean expectedResult, T expectedObj){
		this.caseId = caseId;
		this.expectedResult = expectedResult;
		this.expectedObj = expectedObj;
		this.isIgnored = false;
	}

	public ParentTest(int caseId, T expectedObj, boolean isIgnored){
		this.caseId = caseId;
		this.isIgnored = isIgnored;
		this.expectedObj = expectedObj;
		this.expectedResult = true;
	}

	public ParentTest(int caseId, boolean isIgnored, boolean expectedResult, T expectedObj){
		this(caseId, expectedResult, expectedObj);
		this.isIgnored = isIgnored;
	}

	/**
	 * 默认执行结果为true
	 * @param caseId
	 * @param expectedObj
	 */
	public ParentTest(int caseId, T expectedObj){
		this.caseId = caseId;
		this.expectedObj = expectedObj;
		this.expectedResult = true;
		this.isIgnored = false;
	}

    public ParentTest(T expectedObj){
        this(numberOfCase++, false, true, expectedObj);
    }

	public ParentTest(){

	}

	public final Boolean isExpectedResult() {
		return expectedResult;
	}

	public final void setExpectedResult(boolean expectedResult) {
		this.expectedResult = expectedResult;
	}

	public final T getExpectedObj() {
		return expectedObj;
	}

	public final void setExpectedObj(T expectedObj) {
		this.expectedObj = expectedObj;
	}

	public final int getCaseId() {
		return caseId;
	}

	public final void setCaseId(int caseId) {
		this.caseId = caseId;
	}

	public final Boolean isIgnored() {
        return isIgnored || (debugNum != -1 && debugNum != caseId);
    }

	public final void setIgnored(boolean isIgnored) {
		this.isIgnored = isIgnored;
	}

	public final List<Object> getParameters() {
		return parameters;
	}

	public final void setParameters(List<Object> parameters) {
		this.parameters = parameters;
	}

    public final void judgeBySelf() {
        isSelfJudged = true;
    }

    public final void specifyCase(int debugNum) {
        this.debugNum = debugNum;
    }

    @Before
	public final void before(){
		System.out.println("Case: " + caseId + " start...");
	}

    @Test
    public final void commonTest() {
        specifyCase();
        setSelfJudged();
        if (!isIgnored()) {
            test();
        }
    }

    @After
    public final void after() {
        if (!isIgnored()) {
            if (!isSelfJudged) {
                if (expectedObj.getClass().isArray()) {
                    Class<?> componentClazz = expectedObj.getClass().getComponentType();
                    if (componentClazz == double.class) {
                        assertArrayEquals((double[]) expectedObj, (double[]) generatedObj, 0);
                    } else if (componentClazz == long.class) {
                        assertArrayEquals((long[]) expectedObj, (long[]) generatedObj);
                    } else if (componentClazz == byte.class) {
                        assertArrayEquals((byte[]) expectedObj, (byte[]) generatedObj);
                    } else if (componentClazz == int.class) {
                        assertArrayEquals((int[]) expectedObj, (int[]) generatedObj);
                    } else if (componentClazz == short.class) {
                        assertArrayEquals((short[]) expectedObj, (short[]) generatedObj);
                    } else if (componentClazz == boolean.class) {
                        assertArrayEquals((boolean[]) expectedObj, (boolean[]) generatedObj);
                    } else if (componentClazz == float.class) {
                        assertArrayEquals((float[]) expectedObj, (float[]) generatedObj, 0);
                    } else {
                        assertArrayEquals((Object[]) expectedObj, (Object[]) generatedObj);
                    }
                    System.out.println("Correct(array)...");
                } else {
                    if (!expectedResult) {
                        if (null == expectedObj) { // 只需要判断生成的对象为空即可
                            assertEquals(null, generatedObj);
                        } else {
                            assertNotEquals(expectedObj, generatedObj);
                        }
                        System.out.println("Expected result is false and result is false...");
                    } else {
                        if (OBJ == expectedObj) { // 只需要判断生成的对象不为空即可
                            assertNotEquals(null, generatedObj);
                        } else {
                            assertEquals(expectedObj, generatedObj);
                        }
                        System.out.println("Expected result is true and result is true...");
                    }
                }
            } else {
                System.out.println("Case " + caseId + " is judged by self!");
            }
        } else {
            System.out.println("Case " + caseId + " is ignored!");
        }
        System.out.println("Case: " + caseId + " end...");
    }

    /**
     * Empty implementation.
     * 子类覆盖以设置子类是否执行自己的判断逻辑.
     */
    protected void setSelfJudged() {

    }

    /**
     * Empty implementation.
     * 设置Debug模式; -1代表关闭debug, 大于0代表执行指定{@linkplain #caseId}的case.
     * 子类覆盖以实现执行特定case的功能.
     */
    protected void specifyCase() {

    }

    protected abstract void test();

    /**
     * Empty test for CaseManager.
     */
    public static final class EmptyParentTest extends ParentTest{
        @Override
        protected void test() {

        }
    }
}
